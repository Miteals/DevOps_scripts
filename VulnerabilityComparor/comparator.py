import json

with open("trivy_scan_old.json") as f:
    scan_old = json.load(f)

with open("trivy_scan_new.json") as f:
    scan_new = json.load(f)

diff = {}
scan_new_img_vulnerabilities = [] #vul in new images

if "Vulnerabilities" in scan_new[0] and len(scan_new[0]["Vulnerabilities"]) > 0:
    for item in scan_new[0]["Vulnerabilities"]:
        scan_new_img_vulnerabilities.append(item["VulnerabilityID"])

if "Vulnerabilities" in scan_old[0] and len(scan_old[0]["Vulnerabilities"]) > 0:
    for item in scan_old[0]["Vulnerabilities"]:
        if item["VulnerabilityID"] not in scan_new_img_vulnerabilities: #check if vul from old image is not in new image; check if new image fixes vul
            diff[item["VulnerabilityID"]] = {"Severity": item["Severity"], "Title": item["Title"] if "Title" in item else ""} #, "Description": item["Description"]}

result = {
    "Fixable vulnerabilities": {
        "Count": len(diff),
        "Count By Severity": {
            "Critical": len([i for i in diff.values() if i["Severity"] == "CRITICAL"]),
            "High": len([i for i in diff.values() if i["Severity"] == "HIGH"]),
            "Medium": len([i for i in diff.values() if i["Severity"] == "MEDIUM"]),
            "Low": len([i for i in diff.values() if i["Severity"] == "LOW"]),
            "?": len([i for i in diff.values() if i["Severity"] not in ["CRITICAL", "HIGH", "MEDIUM", "LOW"]]),
        },
        "Vulnerabilities": diff
    }
}

with open("result.json", "w") as f:
    json.dump(result, f, indent=4)